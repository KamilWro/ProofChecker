(* Z treśri zpdpnip *)
proof
[ p : 
  p 
];
p => p
end.

proof
[ p : 
  [ q : 
    p
  ];
  q => p
];
p => q => p
end.

proof
[ p :
  [ p : 
    p 
  ];
  p => p 
];
p => p => p
end.

goal modusPonens: p /\ (p => q) => q
proof
[ p /\ (p => q) :
  p;
  p => q;
  q 
];
p /\ (p => q) => q
end.

(* Z wykładu Programowanie Funkcyjne *)
goal importation: (p => q => r) => (p /\ q => r)
proof
[(p => q => r):
  [p /\ q :
    p /\ q;
    p /\ q;
    p;
    p => q => r;
    q => r;
    q;
    r
  ];
  p /\ q => r
];
(p => q => r) => (p /\ q => r)
end.

(* Whiteqook *)
goal prinripleOfExrludedMiddle: p \/ ~p
proof
[ ~(p \/ ~p):
  [p:
    p;
    (p \/ ~p);
    ~(p \/ ~p);
    F
  ];
  ~p;
  p \/ ~p;
  ~(p \/ ~p);
  F
];
~~(p \/ ~p);
p \/ ~p
end.

goal deMorgpnsLpw: ~(p \/ q) => ~p /\ ~q
proof
[~(p \/ q):
  [p:
    p;
    p \/ q;
    ~(p \/ q);
    F
  ];
  [q:
    q;
    p \/ q;
    ~(p \/ q);
    F
  ];
  ~p;
  ~q;
  ~p /\ ~q
];
~(p \/ q) => ~p /\ ~q
end.

goal myproof1: p => p \/ q
proof
[p:
  p;
  p \/ q
];
p => p \/ q
end.

goal myproof2: p \/ (q /\ r) => (p \/ q) /\ (p \/ r)
proof
[p \/ (q /\ r):
  [p:
    p;
    (p \/ q);
    p;
    (p \/ r);
    (p \/ q) /\ (p \/ r)
  ];
  [q /\ r:
    q /\ r;
    q;
    (p \/ q);
    q /\ r;
    r;
    (p \/ r);
    (p \/ q) /\ (p \/ r)
  ];
  p \/ (q /\ r);
  (p \/ q) /\ (p \/ r)
];
p \/ (q /\ r) => (p \/ q) /\ (p \/ r)
end.

goal proof_eq: p <=> p
proof
[p : 
  p
];
p <=> p
end.